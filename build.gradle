buildscript {
    repositories {
        maven {
            url 'https://ehdev.artifactoryonline.com/ehdev/local-release/'
            credentials {
                username 'read'
                password 'WUKPJRpDY6AMqdGWxyce334QwCKj3KFw'
            }
        }
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.ehdev.conrad:gradle-plugin:+'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.2.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.0'
        classpath "org.flywaydb:flyway-gradle-plugin:3.2.1"
    }
}

allprojects {
    apply plugin: 'idea'
    group = 'io.ehdev.conrad'

    repositories {
        mavenCentral()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }
}

apply from: "gradle/versions.gradle"
apply from: "gradle/database.gradle"
apply plugin: 'version-manager'
apply plugin: 'base'
apply plugin: 'jacoco'

versionManager {
    repoId = '3e79966b-a630-4efa-901b-8819c929c5e3'
    token = '08A7jgz3PYAcBFh9yZNY8PmsrnNxpEyHU4mgeTYFsntHDno6yRPMkvk7RuOR'
    providerBaseUrl = 'http://api.ehdev.io'
}


subprojects {
    buildDir = new File(rootProject.getProjectDir(), "build/${project.path.replace(':', '/').substring(1)}")
    apply plugin: 'java'

    task resolveDependencies {
        doLast {
            configurations.testRuntime.files
        }
    }

    tasks.withType(Test) { test ->
        test.maxHeapSize = '512m'
        test.environment 'SPRING_DATASOURCE_URL', database.url
        test.environment 'SPRING_DATASOURCE_USERNAME', database.user
        test.environment 'SPRING_DATASOURCE_PASSWORD', database.password
    }
}

idea.project.ipr {
    withXml { provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}

task mergeReport(type: JacocoMerge) {
    dependsOn { subprojects.collect { it.tasks.withType(Test) }.flatten() }
    executionData fileTree(dir: "$rootDir/build", include: '**/*.exec')
}

evaluationDependsOnChildren()

task testCoverage(type: JacocoReport) {
    dependsOn mergeReport
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output).asFileTree.matching {
        exclude '**/io/ehdev/conrad/db/tables/**'
    }
    executionData = mergeReport.executionData

    onlyIf = {
        true
    }
}

check.dependsOn testCoverage

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects.collect { it.tasks.withType(Test) }.flatten()
}

check.dependsOn testReport

task generateDocumentation(type: Copy) {
    from {
        subprojects.collect {
            it.tasks.withType(org.asciidoctor.gradle.AsciidoctorTask).collect { task -> task.outputDir }
        }.flatten()
    }
    into "$buildDir/documentation"
}

build.dependsOn generateDocumentation
