buildscript {
    repositories {
        maven {
            url 'https://ehdev.artifactoryonline.com/ehdev/local-release/'
            credentials {
                username 'read'
                password 'WUKPJRpDY6AMqdGWxyce334QwCKj3KFw'
            }
        }
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.ehdev.conrad:gradle-plugin:+'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.2.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.0-beta-4589'
        classpath "org.flywaydb:flyway-gradle-plugin:3.2.1"
    }
}

allprojects {
    apply plugin: 'idea'
    group = 'io.ehdev.conrad'
}

apply from: "gradle/versions.gradle"
apply plugin: 'version-manager'

versionManager {
    repoId = '3e79966b-a630-4efa-901b-8819c929c5e3'
    token = '08A7jgz3PYAcBFh9yZNY8PmsrnNxpEyHU4mgeTYFsntHDno6yRPMkvk7RuOR'
    providerBaseUrl = 'http://api.ehdev.io'
}

subprojects {
    buildDir = new File(rootProject.getProjectDir(), "build/${project.name}")
    apply plugin: 'java'

    repositories {
        mavenCentral()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }

    sourceCompatibility = '1.8'

    sourceSets {
        integTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integTest/java')
            }
            resources.srcDir file('src/integTest/resources')
        }
    }

    configurations {
        integTestCompile.extendsFrom testCompile
        integTestRuntime.extendsFrom testRuntime
        all {
            exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
        }
    }

    def integTest = tasks.create('integTest', Test) {
        shouldRunAfter(tasks.test)
        testClassesDir = sourceSets.integTest.output.classesDir
        classpath = sourceSets.integTest.runtimeClasspath
        reports.html.destination = file("$buildDir/reports/integration-test")
    }

    tasks.withType(Test) {
        testLogging {
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                }
            }
        }
    }

    tasks.check.dependsOn(integTest)
}

idea.project.ipr {
    withXml { provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}

task teamcityVersion {
    doLast {
        println "##teamcity[buildNumber '$version']"
    }
}
