apply plugin: 'java'

sourceSets {
    main {
        java {
            srcDir 'src/main/generated-java'
        }
    }
}

configurations {
    codegen
    compile.extendsFrom codegen
}

dependencies {
    codegen 'org.postgresql:postgresql:9.4.1207.jre7'
    codegen 'org.jooq:jooq:3.7.2'
    codegen 'org.jooq:jooq-meta:3.7.2'
    codegen 'org.jooq:jooq-codegen:3.7.2'

    compile project(':database:database-migration')
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'javax.persistence:persistence-api:1.0.2'
}

def createLibraryXml = task createLibraryXml {
    dependsOn ':database:database-migration:flywayMigrate'
    ext.libraryFile = file("$buildDir/library.xml")
    ext.outputDir = file('src/main/generated-java')
    doFirst {
        (ext.libraryFile as File).parentFile.mkdirs()
    }
    doLast {
        def xml = new groovy.xml.StreamingMarkupBuilder().bind { bnd ->
            configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
                mkp.comment("Generated at ${new Date()}")
                jdbc() {
                    driver(database.driver)
                    url(database.url)
                    user(database.user)
                    password(database.password)
                }
                generator() {
                    database() {
                        bnd.name('org.jooq.util.postgres.PostgresDatabase')
                        excludes('schema_version')
                        inputSchema('public')
                        customTypes() {
                            customType() {
                                bnd.name("Instant")
                                type('java.time.Instant')
                                converter('io.ehdev.conrad.db.converter.TimestampConverter')
                            }
                        }
                        forcedTypes() {
                            forcedType() {
                                bnd.name('Instant')
                                types('timestamp\\ with\\ time\\ zone')
                            }
                        }
                    }
                    generate([:]) {
                        pojos true
                        daos true
                        jpaAnnotations true
                        validationAnnotations true
                    }
                    strategy() {
                        matchers() {
                            tables() {
                                table() {
                                    tableClass() {
                                        transform("PASCAL")
                                        expression('$0_Table')
                                    }
                                }
                            }
                        }
                    }
                    target() {
                        packageName('io.ehdev.conrad.db')
                        directory(ext.outputDir.absolutePath)
                    }
                }
            }
        }

        ext.libraryFile.text = groovy.xml.XmlUtil.serialize(xml)
    }
}

task generateDataModel(type: JavaExec, dependsOn: ['createLibraryXml']) {
    inputs.files(configurations.codegen)
    inputs.file(createLibraryXml.libraryFile.absolutePath)
    outputs.dir(createLibraryXml.outputDir.absolutePath)
    setMain('org.jooq.util.GenerationTool')
    args(createLibraryXml.libraryFile.absolutePath)
    classpath configurations.codegen
}


compileJava.dependsOn generateDataModel
