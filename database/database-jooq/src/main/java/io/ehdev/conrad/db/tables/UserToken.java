/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables;


import io.ehdev.conrad.db.Keys;
import io.ehdev.conrad.db.Public;
import io.ehdev.conrad.db.tables.records.UserTokenRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserToken extends TableImpl<UserTokenRecord> {

	private static final long serialVersionUID = 1841548952;

	/**
	 * The reference instance of <code>public.user_token</code>
	 */
	public static final UserToken USER_TOKEN = new UserToken();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UserTokenRecord> getRecordType() {
		return UserTokenRecord.class;
	}

	/**
	 * The column <code>public.user_token.uuid</code>.
	 */
	public final TableField<UserTokenRecord, UUID> UUID = createField("uuid", org.jooq.impl.SQLDataType.UUID.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.user_token.user_uuid</code>.
	 */
	public final TableField<UserTokenRecord, UUID> USER_UUID = createField("user_uuid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>public.user_token.created_at</code>.
	 */
	public final TableField<UserTokenRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.user_token.expires_at</code>.
	 */
	public final TableField<UserTokenRecord, Timestamp> EXPIRES_AT = createField("expires_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>public.user_token.valid</code>.
	 */
	public final TableField<UserTokenRecord, Boolean> VALID = createField("valid", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "");

	/**
	 * The column <code>public.user_token.token_type</code>.
	 */
	public final TableField<UserTokenRecord, String> TOKEN_TYPE = createField("token_type", org.jooq.impl.SQLDataType.VARCHAR.length(5).nullable(false), this, "");

	/**
	 * Create a <code>public.user_token</code> table reference
	 */
	public UserToken() {
		this("user_token", null);
	}

	/**
	 * Create an aliased <code>public.user_token</code> table reference
	 */
	public UserToken(String alias) {
		this(alias, USER_TOKEN);
	}

	private UserToken(String alias, Table<UserTokenRecord> aliased) {
		this(alias, aliased, null);
	}

	private UserToken(String alias, Table<UserTokenRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UserTokenRecord> getPrimaryKey() {
		return Keys.USER_TOKEN_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UserTokenRecord>> getKeys() {
		return Arrays.<UniqueKey<UserTokenRecord>>asList(Keys.USER_TOKEN_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<UserTokenRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<UserTokenRecord, ?>>asList(Keys.USER_TOKEN__USER_TOKEN_USER_UUID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserToken as(String alias) {
		return new UserToken(alias, this);
	}

	/**
	 * Rename this table
	 */
	public UserToken rename(String name) {
		return new UserToken(name, null);
	}
}
