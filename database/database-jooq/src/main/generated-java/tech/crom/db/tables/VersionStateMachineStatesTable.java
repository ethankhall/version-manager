/*
 * This file is generated by jOOQ.
 */
package tech.crom.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.crom.db.Indexes;
import tech.crom.db.Keys;
import tech.crom.db.VersionManagerTest;
import tech.crom.db.tables.records.VersionStateMachineStatesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VersionStateMachineStatesTable extends TableImpl<VersionStateMachineStatesRecord> {

    private static final long serialVersionUID = 636939758;

    /**
     * The reference instance of <code>version_manager_test.version_state_machine_states</code>
     */
    public static final VersionStateMachineStatesTable VERSION_STATE_MACHINE_STATES = new VersionStateMachineStatesTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VersionStateMachineStatesRecord> getRecordType() {
        return VersionStateMachineStatesRecord.class;
    }

    /**
     * The column <code>version_manager_test.version_state_machine_states.version_state_machine_state_id</code>.
     */
    public final TableField<VersionStateMachineStatesRecord, Long> VERSION_STATE_MACHINE_STATE_ID = createField("version_state_machine_state_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>version_manager_test.version_state_machine_states.version_state_machine_id</code>.
     */
    public final TableField<VersionStateMachineStatesRecord, Long> VERSION_STATE_MACHINE_ID = createField("version_state_machine_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>version_manager_test.version_state_machine_states.state_name</code>.
     */
    public final TableField<VersionStateMachineStatesRecord, String> STATE_NAME = createField("state_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>version_manager_test.version_state_machine_states.auto_transition</code>.
     */
    public final TableField<VersionStateMachineStatesRecord, Boolean> AUTO_TRANSITION = createField("auto_transition", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>version_manager_test.version_state_machine_states.next_state</code>.
     */
    public final TableField<VersionStateMachineStatesRecord, String> NEXT_STATE = createField("next_state", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>version_manager_test.version_state_machine_states</code> table reference
     */
    public VersionStateMachineStatesTable() {
        this(DSL.name("version_state_machine_states"), null);
    }

    /**
     * Create an aliased <code>version_manager_test.version_state_machine_states</code> table reference
     */
    public VersionStateMachineStatesTable(String alias) {
        this(DSL.name(alias), VERSION_STATE_MACHINE_STATES);
    }

    /**
     * Create an aliased <code>version_manager_test.version_state_machine_states</code> table reference
     */
    public VersionStateMachineStatesTable(Name alias) {
        this(alias, VERSION_STATE_MACHINE_STATES);
    }

    private VersionStateMachineStatesTable(Name alias, Table<VersionStateMachineStatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private VersionStateMachineStatesTable(Name alias, Table<VersionStateMachineStatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> VersionStateMachineStatesTable(Table<O> child, ForeignKey<O, VersionStateMachineStatesRecord> key) {
        super(child, key, VERSION_STATE_MACHINE_STATES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return VersionManagerTest.VERSION_MANAGER_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VERSION_STATE_MACHINE_STATES_PRIMARY, Indexes.VERSION_STATE_MACHINE_STATES_VERSION_STATE_MACHINE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VersionStateMachineStatesRecord, Long> getIdentity() {
        return Keys.IDENTITY_VERSION_STATE_MACHINE_STATES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VersionStateMachineStatesRecord> getPrimaryKey() {
        return Keys.KEY_VERSION_STATE_MACHINE_STATES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VersionStateMachineStatesRecord>> getKeys() {
        return Arrays.<UniqueKey<VersionStateMachineStatesRecord>>asList(Keys.KEY_VERSION_STATE_MACHINE_STATES_PRIMARY, Keys.KEY_VERSION_STATE_MACHINE_STATES_VERSION_STATE_MACHINE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VersionStateMachineStatesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VersionStateMachineStatesRecord, ?>>asList(Keys.VERSION_STATE_MACHINE_STATES_IBFK_1);
    }

    public VersionStateMachineDefinitionsTable versionStateMachineDefinitions() {
        return new VersionStateMachineDefinitionsTable(this, Keys.VERSION_STATE_MACHINE_STATES_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VersionStateMachineStatesTable as(String alias) {
        return new VersionStateMachineStatesTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VersionStateMachineStatesTable as(Name alias) {
        return new VersionStateMachineStatesTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VersionStateMachineStatesTable rename(String name) {
        return new VersionStateMachineStatesTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VersionStateMachineStatesTable rename(Name name) {
        return new VersionStateMachineStatesTable(name, null);
    }
}
