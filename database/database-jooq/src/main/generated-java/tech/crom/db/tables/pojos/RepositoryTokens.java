/*
 * This file is generated by jOOQ.
 */
package tech.crom.db.tables.pojos;


import java.io.Serializable;
import java.time.Instant;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "repository_tokens", schema = "version_manager_test", indexes = {
    @Index(name = "PRIMARY", unique = true, columnList = "repository_token_id ASC"),
    @Index(name = "public_repo_token", unique = true, columnList = "public_repo_token ASC"),
    @Index(name = "repo_id", columnList = "repo_id ASC")
})
public class RepositoryTokens implements Serializable {

    private static final long serialVersionUID = -940056734;

    private Long    repositoryTokenId;
    private String  publicRepoToken;
    private Instant createdAt;
    private Instant expiresAt;
    private Boolean valid;
    private Long    repoId;

    public RepositoryTokens() {}

    public RepositoryTokens(RepositoryTokens value) {
        this.repositoryTokenId = value.repositoryTokenId;
        this.publicRepoToken = value.publicRepoToken;
        this.createdAt = value.createdAt;
        this.expiresAt = value.expiresAt;
        this.valid = value.valid;
        this.repoId = value.repoId;
    }

    public RepositoryTokens(
        Long    repositoryTokenId,
        String  publicRepoToken,
        Instant createdAt,
        Instant expiresAt,
        Boolean valid,
        Long    repoId
    ) {
        this.repositoryTokenId = repositoryTokenId;
        this.publicRepoToken = publicRepoToken;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.valid = valid;
        this.repoId = repoId;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "repository_token_id", unique = true, nullable = false, precision = 19)
    public Long getRepositoryTokenId() {
        return this.repositoryTokenId;
    }

    public void setRepositoryTokenId(Long repositoryTokenId) {
        this.repositoryTokenId = repositoryTokenId;
    }

    @Column(name = "public_repo_token", unique = true, nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    public String getPublicRepoToken() {
        return this.publicRepoToken;
    }

    public void setPublicRepoToken(String publicRepoToken) {
        this.publicRepoToken = publicRepoToken;
    }

    @Column(name = "created_at", nullable = false)
    @NotNull
    public Instant getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Instant createdAt) {
        this.createdAt = createdAt;
    }

    @Column(name = "expires_at", nullable = false)
    public Instant getExpiresAt() {
        return this.expiresAt;
    }

    public void setExpiresAt(Instant expiresAt) {
        this.expiresAt = expiresAt;
    }

    @Column(name = "valid")
    public Boolean getValid() {
        return this.valid;
    }

    public void setValid(Boolean valid) {
        this.valid = valid;
    }

    @Column(name = "repo_id", nullable = false, precision = 19)
    @NotNull
    public Long getRepoId() {
        return this.repoId;
    }

    public void setRepoId(Long repoId) {
        this.repoId = repoId;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RepositoryTokens (");

        sb.append(repositoryTokenId);
        sb.append(", ").append(publicRepoToken);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(expiresAt);
        sb.append(", ").append(valid);
        sb.append(", ").append(repoId);

        sb.append(")");
        return sb.toString();
    }
}
