/*
 * This file is generated by jOOQ.
*/
package tech.crom.db.tables.records;


import java.time.Instant;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import tech.crom.db.tables.RepositoryTokensTable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "repository_tokens", schema = "version_manager_test")
public class RepositoryTokensRecord extends UpdatableRecordImpl<RepositoryTokensRecord> implements Record6<Long, String, Instant, Instant, Boolean, Long> {

    private static final long serialVersionUID = -2013642366;

    /**
     * Setter for <code>version_manager_test.repository_tokens.repository_token_id</code>.
     */
    public void setRepositoryTokenId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>version_manager_test.repository_tokens.repository_token_id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "repository_token_id", unique = true, nullable = false, precision = 19)
    @NotNull
    public Long getRepositoryTokenId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>version_manager_test.repository_tokens.public_repo_token</code>.
     */
    public void setPublicRepoToken(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>version_manager_test.repository_tokens.public_repo_token</code>.
     */
    @Column(name = "public_repo_token", unique = true, nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    public String getPublicRepoToken() {
        return (String) get(1);
    }

    /**
     * Setter for <code>version_manager_test.repository_tokens.created_at</code>.
     */
    public void setCreatedAt(Instant value) {
        set(2, value);
    }

    /**
     * Getter for <code>version_manager_test.repository_tokens.created_at</code>.
     */
    @Column(name = "created_at", nullable = false)
    public Instant getCreatedAt() {
        return (Instant) get(2);
    }

    /**
     * Setter for <code>version_manager_test.repository_tokens.expires_at</code>.
     */
    public void setExpiresAt(Instant value) {
        set(3, value);
    }

    /**
     * Getter for <code>version_manager_test.repository_tokens.expires_at</code>.
     */
    @Column(name = "expires_at", nullable = false)
    public Instant getExpiresAt() {
        return (Instant) get(3);
    }

    /**
     * Setter for <code>version_manager_test.repository_tokens.valid</code>.
     */
    public void setValid(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>version_manager_test.repository_tokens.valid</code>.
     */
    @Column(name = "valid")
    public Boolean getValid() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>version_manager_test.repository_tokens.repo_id</code>.
     */
    public void setRepoId(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>version_manager_test.repository_tokens.repo_id</code>.
     */
    @Column(name = "repo_id", nullable = false, precision = 19)
    @NotNull
    public Long getRepoId() {
        return (Long) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Long, String, Instant, Instant, Boolean, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Long, String, Instant, Instant, Boolean, Long> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return RepositoryTokensTable.REPOSITORY_TOKENS.REPOSITORY_TOKEN_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return RepositoryTokensTable.REPOSITORY_TOKENS.PUBLIC_REPO_TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Instant> field3() {
        return RepositoryTokensTable.REPOSITORY_TOKENS.CREATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Instant> field4() {
        return RepositoryTokensTable.REPOSITORY_TOKENS.EXPIRES_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field5() {
        return RepositoryTokensTable.REPOSITORY_TOKENS.VALID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return RepositoryTokensTable.REPOSITORY_TOKENS.REPO_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getRepositoryTokenId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getPublicRepoToken();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instant value3() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instant value4() {
        return getExpiresAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value5() {
        return getValid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getRepoId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoryTokensRecord value1(Long value) {
        setRepositoryTokenId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoryTokensRecord value2(String value) {
        setPublicRepoToken(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoryTokensRecord value3(Instant value) {
        setCreatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoryTokensRecord value4(Instant value) {
        setExpiresAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoryTokensRecord value5(Boolean value) {
        setValid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoryTokensRecord value6(Long value) {
        setRepoId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoryTokensRecord values(Long value1, String value2, Instant value3, Instant value4, Boolean value5, Long value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RepositoryTokensRecord
     */
    public RepositoryTokensRecord() {
        super(RepositoryTokensTable.REPOSITORY_TOKENS);
    }

    /**
     * Create a detached, initialised RepositoryTokensRecord
     */
    public RepositoryTokensRecord(Long repositoryTokenId, String publicRepoToken, Instant createdAt, Instant expiresAt, Boolean valid, Long repoId) {
        super(RepositoryTokensTable.REPOSITORY_TOKENS);

        set(0, repositoryTokenId);
        set(1, publicRepoToken);
        set(2, createdAt);
        set(3, expiresAt);
        set(4, valid);
        set(5, repoId);
    }
}
