/**
 * This class is generated by jOOQ
 */
package tech.crom.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import tech.crom.db.Keys;
import tech.crom.db.VersionManagerTest;
import tech.crom.db.tables.records.CommitDetailsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommitDetailsTable extends TableImpl<CommitDetailsRecord> {

    private static final long serialVersionUID = 1868664041;

    /**
     * The reference instance of <code>version_manager_test.commit_details</code>
     */
    public static final CommitDetailsTable COMMIT_DETAILS = new CommitDetailsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommitDetailsRecord> getRecordType() {
        return CommitDetailsRecord.class;
    }

    /**
     * The column <code>version_manager_test.commit_details.commit_details_id</code>.
     */
    public final TableField<CommitDetailsRecord, Long> COMMIT_DETAILS_ID = createField("commit_details_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>version_manager_test.commit_details.repo_details_id</code>.
     */
    public final TableField<CommitDetailsRecord, Long> REPO_DETAILS_ID = createField("repo_details_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>version_manager_test.commit_details.parent_commit_id</code>.
     */
    public final TableField<CommitDetailsRecord, Long> PARENT_COMMIT_ID = createField("parent_commit_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>version_manager_test.commit_details.commit_id</code>.
     */
    public final TableField<CommitDetailsRecord, String> COMMIT_ID = createField("commit_id", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

    /**
     * The column <code>version_manager_test.commit_details.version</code>.
     */
    public final TableField<CommitDetailsRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR.length(120).nullable(false), this, "");

    /**
     * The column <code>version_manager_test.commit_details.created_at</code>.
     */
    public final TableField<CommitDetailsRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>version_manager_test.commit_details</code> table reference
     */
    public CommitDetailsTable() {
        this("commit_details", null);
    }

    /**
     * Create an aliased <code>version_manager_test.commit_details</code> table reference
     */
    public CommitDetailsTable(String alias) {
        this(alias, COMMIT_DETAILS);
    }

    private CommitDetailsTable(String alias, Table<CommitDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommitDetailsTable(String alias, Table<CommitDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return VersionManagerTest.VERSION_MANAGER_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CommitDetailsRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMMIT_DETAILS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CommitDetailsRecord> getPrimaryKey() {
        return Keys.KEY_COMMIT_DETAILS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CommitDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<CommitDetailsRecord>>asList(Keys.KEY_COMMIT_DETAILS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CommitDetailsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CommitDetailsRecord, ?>>asList(Keys.COMMIT_DETAILS_IBFK_1, Keys.COMMIT_DETAILS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitDetailsTable as(String alias) {
        return new CommitDetailsTable(alias, this);
    }

    /**
     * Rename this table
     */
    public CommitDetailsTable rename(String name) {
        return new CommitDetailsTable(name, null);
    }
}
