/*
 * This file is generated by jOOQ.
 */
package tech.crom.db.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.crom.db.Indexes;
import tech.crom.db.Keys;
import tech.crom.db.VersionManagerTest;
import tech.crom.db.converter.TimestampConverter;
import tech.crom.db.tables.records.CommitDetailsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommitDetailsTable extends TableImpl<CommitDetailsRecord> {

    private static final long serialVersionUID = 26449463;

    /**
     * The reference instance of <code>version_manager_test.commit_details</code>
     */
    public static final CommitDetailsTable COMMIT_DETAILS = new CommitDetailsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommitDetailsRecord> getRecordType() {
        return CommitDetailsRecord.class;
    }

    /**
     * The column <code>version_manager_test.commit_details.commit_detail_id</code>.
     */
    public final TableField<CommitDetailsRecord, Long> COMMIT_DETAIL_ID = createField("commit_detail_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>version_manager_test.commit_details.repo_detail_id</code>.
     */
    public final TableField<CommitDetailsRecord, Long> REPO_DETAIL_ID = createField("repo_detail_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>version_manager_test.commit_details.parent_commit_id</code>.
     */
    public final TableField<CommitDetailsRecord, Long> PARENT_COMMIT_ID = createField("parent_commit_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>version_manager_test.commit_details.commit_id</code>.
     */
    public final TableField<CommitDetailsRecord, String> COMMIT_ID = createField("commit_id", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>version_manager_test.commit_details.version</code>.
     */
    public final TableField<CommitDetailsRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>version_manager_test.commit_details.created_at</code>.
     */
    public final TableField<CommitDetailsRecord, Instant> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(6)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new TimestampConverter());

    /**
     * The column <code>version_manager_test.commit_details.state</code>.
     */
    public final TableField<CommitDetailsRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("RELEASED", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>version_manager_test.commit_details</code> table reference
     */
    public CommitDetailsTable() {
        this(DSL.name("commit_details"), null);
    }

    /**
     * Create an aliased <code>version_manager_test.commit_details</code> table reference
     */
    public CommitDetailsTable(String alias) {
        this(DSL.name(alias), COMMIT_DETAILS);
    }

    /**
     * Create an aliased <code>version_manager_test.commit_details</code> table reference
     */
    public CommitDetailsTable(Name alias) {
        this(alias, COMMIT_DETAILS);
    }

    private CommitDetailsTable(Name alias, Table<CommitDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommitDetailsTable(Name alias, Table<CommitDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CommitDetailsTable(Table<O> child, ForeignKey<O, CommitDetailsRecord> key) {
        super(child, key, COMMIT_DETAILS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return VersionManagerTest.VERSION_MANAGER_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMIT_DETAILS_COMMIT_ID_STATE_IDX, Indexes.COMMIT_DETAILS_PARENT_COMMIT_ID, Indexes.COMMIT_DETAILS_PRIMARY, Indexes.COMMIT_DETAILS_REPO_ID_STATE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CommitDetailsRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMMIT_DETAILS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CommitDetailsRecord> getPrimaryKey() {
        return Keys.KEY_COMMIT_DETAILS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CommitDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<CommitDetailsRecord>>asList(Keys.KEY_COMMIT_DETAILS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CommitDetailsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CommitDetailsRecord, ?>>asList(Keys.COMMIT_DETAILS_IBFK_1, Keys.COMMIT_DETAILS_IBFK_2);
    }

    public RepoDetailsTable repoDetails() {
        return new RepoDetailsTable(this, Keys.COMMIT_DETAILS_IBFK_1);
    }

    public tech.crom.db.tables.CommitDetailsTable commitDetails() {
        return new tech.crom.db.tables.CommitDetailsTable(this, Keys.COMMIT_DETAILS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitDetailsTable as(String alias) {
        return new CommitDetailsTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitDetailsTable as(Name alias) {
        return new CommitDetailsTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommitDetailsTable rename(String name) {
        return new CommitDetailsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommitDetailsTable rename(Name name) {
        return new CommitDetailsTable(name, null);
    }
}
