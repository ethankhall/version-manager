/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables.daos;


import io.ehdev.conrad.db.tables.SsUserconnectionTable;
import io.ehdev.conrad.db.tables.pojos.SsUserconnection;
import io.ehdev.conrad.db.tables.records.SsUserconnectionRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record3;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SsUserconnectionDao extends DAOImpl<SsUserconnectionRecord, SsUserconnection, Record3<String, String, String>> {

    /**
     * Create a new SsUserconnectionDao without any configuration
     */
    public SsUserconnectionDao() {
        super(SsUserconnectionTable.SS_USERCONNECTION, SsUserconnection.class);
    }

    /**
     * Create a new SsUserconnectionDao with an attached configuration
     */
    public SsUserconnectionDao(Configuration configuration) {
        super(SsUserconnectionTable.SS_USERCONNECTION, SsUserconnection.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record3<String, String, String> getId(SsUserconnection object) {
        return compositeKeyRecord(object.getUserid(), object.getProviderid(), object.getProvideruserid());
    }

    /**
     * Fetch records that have <code>userid IN (values)</code>
     */
    public List<SsUserconnection> fetchByUserid(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.USERID, values);
    }

    /**
     * Fetch records that have <code>providerid IN (values)</code>
     */
    public List<SsUserconnection> fetchByProviderid(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.PROVIDERID, values);
    }

    /**
     * Fetch records that have <code>provideruserid IN (values)</code>
     */
    public List<SsUserconnection> fetchByProvideruserid(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.PROVIDERUSERID, values);
    }

    /**
     * Fetch records that have <code>rank IN (values)</code>
     */
    public List<SsUserconnection> fetchByRank(Integer... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.RANK, values);
    }

    /**
     * Fetch records that have <code>displayname IN (values)</code>
     */
    public List<SsUserconnection> fetchByDisplayname(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.DISPLAYNAME, values);
    }

    /**
     * Fetch records that have <code>profileurl IN (values)</code>
     */
    public List<SsUserconnection> fetchByProfileurl(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.PROFILEURL, values);
    }

    /**
     * Fetch records that have <code>imageurl IN (values)</code>
     */
    public List<SsUserconnection> fetchByImageurl(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.IMAGEURL, values);
    }

    /**
     * Fetch records that have <code>accesstoken IN (values)</code>
     */
    public List<SsUserconnection> fetchByAccesstoken(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.ACCESSTOKEN, values);
    }

    /**
     * Fetch records that have <code>secret IN (values)</code>
     */
    public List<SsUserconnection> fetchBySecret(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.SECRET, values);
    }

    /**
     * Fetch records that have <code>refreshtoken IN (values)</code>
     */
    public List<SsUserconnection> fetchByRefreshtoken(String... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.REFRESHTOKEN, values);
    }

    /**
     * Fetch records that have <code>expiretime IN (values)</code>
     */
    public List<SsUserconnection> fetchByExpiretime(Long... values) {
        return fetch(SsUserconnectionTable.SS_USERCONNECTION.EXPIRETIME, values);
    }
}
