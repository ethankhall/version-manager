/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables.daos;


import io.ehdev.conrad.db.tables.ProjectDetailsTable;
import io.ehdev.conrad.db.tables.pojos.ProjectDetails;
import io.ehdev.conrad.db.tables.records.ProjectDetailsRecord;

import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectDetailsDao extends DAOImpl<ProjectDetailsRecord, ProjectDetails, UUID> {

    /**
     * Create a new ProjectDetailsDao without any configuration
     */
    public ProjectDetailsDao() {
        super(ProjectDetailsTable.PROJECT_DETAILS, ProjectDetails.class);
    }

    /**
     * Create a new ProjectDetailsDao with an attached configuration
     */
    public ProjectDetailsDao(Configuration configuration) {
        super(ProjectDetailsTable.PROJECT_DETAILS, ProjectDetails.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UUID getId(ProjectDetails object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<ProjectDetails> fetchByUuid(UUID... values) {
        return fetch(ProjectDetailsTable.PROJECT_DETAILS.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public ProjectDetails fetchOneByUuid(UUID value) {
        return fetchOne(ProjectDetailsTable.PROJECT_DETAILS.UUID, value);
    }

    /**
     * Fetch records that have <code>project_name IN (values)</code>
     */
    public List<ProjectDetails> fetchByProjectName(String... values) {
        return fetch(ProjectDetailsTable.PROJECT_DETAILS.PROJECT_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>project_name = value</code>
     */
    public ProjectDetails fetchOneByProjectName(String value) {
        return fetchOne(ProjectDetailsTable.PROJECT_DETAILS.PROJECT_NAME, value);
    }

    /**
     * Fetch records that have <code>security_id IN (values)</code>
     */
    public List<ProjectDetails> fetchBySecurityId(Long... values) {
        return fetch(ProjectDetailsTable.PROJECT_DETAILS.SECURITY_ID, values);
    }
}
