/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables.records;


import io.ehdev.conrad.db.tables.UserTokensTable;

import java.time.Instant;
import java.util.UUID;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "user_tokens", schema = "public")
public class UserTokensRecord extends UpdatableRecordImpl<UserTokensRecord> implements Record5<UUID, Instant, Instant, Boolean, UUID> {

    private static final long serialVersionUID = 81566583;

    /**
     * Setter for <code>public.user_tokens.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.user_tokens.uuid</code>.
     */
    @Id
    @Column(name = "uuid", unique = true, nullable = false)
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.user_tokens.created_at</code>.
     */
    public void setCreatedAt(Instant value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.user_tokens.created_at</code>.
     */
    @Column(name = "created_at", nullable = false)
    public Instant getCreatedAt() {
        return (Instant) get(1);
    }

    /**
     * Setter for <code>public.user_tokens.expires_at</code>.
     */
    public void setExpiresAt(Instant value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.user_tokens.expires_at</code>.
     */
    @Column(name = "expires_at")
    public Instant getExpiresAt() {
        return (Instant) get(2);
    }

    /**
     * Setter for <code>public.user_tokens.valid</code>.
     */
    public void setValid(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.user_tokens.valid</code>.
     */
    @Column(name = "valid")
    public Boolean getValid() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.user_tokens.user_uuid</code>.
     */
    public void setUserUuid(UUID value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.user_tokens.user_uuid</code>.
     */
    @Column(name = "user_uuid", nullable = false)
    @NotNull
    public UUID getUserUuid() {
        return (UUID) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<UUID, Instant, Instant, Boolean, UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<UUID, Instant, Instant, Boolean, UUID> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field1() {
        return UserTokensTable.USER_TOKENS.UUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Instant> field2() {
        return UserTokensTable.USER_TOKENS.CREATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Instant> field3() {
        return UserTokensTable.USER_TOKENS.EXPIRES_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field4() {
        return UserTokensTable.USER_TOKENS.VALID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field5() {
        return UserTokensTable.USER_TOKENS.USER_UUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value1() {
        return getUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instant value2() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instant value3() {
        return getExpiresAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value4() {
        return getValid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value5() {
        return getUserUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTokensRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTokensRecord value2(Instant value) {
        setCreatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTokensRecord value3(Instant value) {
        setExpiresAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTokensRecord value4(Boolean value) {
        setValid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTokensRecord value5(UUID value) {
        setUserUuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserTokensRecord values(UUID value1, Instant value2, Instant value3, Boolean value4, UUID value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserTokensRecord
     */
    public UserTokensRecord() {
        super(UserTokensTable.USER_TOKENS);
    }

    /**
     * Create a detached, initialised UserTokensRecord
     */
    public UserTokensRecord(UUID uuid, Instant createdAt, Instant expiresAt, Boolean valid, UUID userUuid) {
        super(UserTokensTable.USER_TOKENS);

        set(0, uuid);
        set(1, createdAt);
        set(2, expiresAt);
        set(3, valid);
        set(4, userUuid);
    }
}
