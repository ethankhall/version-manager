/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables.daos;


import io.ehdev.conrad.db.tables.RepositoryTokensTable;
import io.ehdev.conrad.db.tables.pojos.RepositoryTokens;
import io.ehdev.conrad.db.tables.records.RepositoryTokensRecord;

import java.time.Instant;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepositoryTokensDao extends DAOImpl<RepositoryTokensRecord, RepositoryTokens, UUID> {

    /**
     * Create a new RepositoryTokensDao without any configuration
     */
    public RepositoryTokensDao() {
        super(RepositoryTokensTable.REPOSITORY_TOKENS, RepositoryTokens.class);
    }

    /**
     * Create a new RepositoryTokensDao with an attached configuration
     */
    public RepositoryTokensDao(Configuration configuration) {
        super(RepositoryTokensTable.REPOSITORY_TOKENS, RepositoryTokens.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UUID getId(RepositoryTokens object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<RepositoryTokens> fetchByUuid(UUID... values) {
        return fetch(RepositoryTokensTable.REPOSITORY_TOKENS.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public RepositoryTokens fetchOneByUuid(UUID value) {
        return fetchOne(RepositoryTokensTable.REPOSITORY_TOKENS.UUID, value);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<RepositoryTokens> fetchByCreatedAt(Instant... values) {
        return fetch(RepositoryTokensTable.REPOSITORY_TOKENS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>expires_at IN (values)</code>
     */
    public List<RepositoryTokens> fetchByExpiresAt(Instant... values) {
        return fetch(RepositoryTokensTable.REPOSITORY_TOKENS.EXPIRES_AT, values);
    }

    /**
     * Fetch records that have <code>valid IN (values)</code>
     */
    public List<RepositoryTokens> fetchByValid(Boolean... values) {
        return fetch(RepositoryTokensTable.REPOSITORY_TOKENS.VALID, values);
    }

    /**
     * Fetch records that have <code>repo_uuid IN (values)</code>
     */
    public List<RepositoryTokens> fetchByRepoUuid(UUID... values) {
        return fetch(RepositoryTokensTable.REPOSITORY_TOKENS.REPO_UUID, values);
    }
}
