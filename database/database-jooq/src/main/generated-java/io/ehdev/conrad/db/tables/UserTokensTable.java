/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables;


import io.ehdev.conrad.db.Keys;
import io.ehdev.conrad.db.Public;
import io.ehdev.conrad.db.converter.TimestampConverter;
import io.ehdev.conrad.db.enums.TokenType;
import io.ehdev.conrad.db.tables.records.UserTokensRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTokensTable extends TableImpl<UserTokensRecord> {

	private static final long serialVersionUID = 491130010;

	/**
	 * The reference instance of <code>public.user_tokens</code>
	 */
	public static final UserTokensTable USER_TOKENS = new UserTokensTable();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UserTokensRecord> getRecordType() {
		return UserTokensRecord.class;
	}

	/**
	 * The column <code>public.user_tokens.uuid</code>.
	 */
	public final TableField<UserTokensRecord, UUID> UUID = createField("uuid", org.jooq.impl.SQLDataType.UUID.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.user_tokens.user_uuid</code>.
	 */
	public final TableField<UserTokensRecord, UUID> USER_UUID = createField("user_uuid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>public.user_tokens.created_at</code>.
	 */
	public final TableField<UserTokensRecord, Instant> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "", new TimestampConverter());

	/**
	 * The column <code>public.user_tokens.expires_at</code>.
	 */
	public final TableField<UserTokensRecord, Instant> EXPIRES_AT = createField("expires_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampConverter());

	/**
	 * The column <code>public.user_tokens.valid</code>.
	 */
	public final TableField<UserTokensRecord, Boolean> VALID = createField("valid", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "");

	/**
	 * The column <code>public.user_tokens.token_type</code>.
	 */
	public final TableField<UserTokensRecord, TokenType> TOKEN_TYPE = createField("token_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(io.ehdev.conrad.db.enums.TokenType.class), this, "");

	/**
	 * Create a <code>public.user_tokens</code> table reference
	 */
	public UserTokensTable() {
		this("user_tokens", null);
	}

	/**
	 * Create an aliased <code>public.user_tokens</code> table reference
	 */
	public UserTokensTable(String alias) {
		this(alias, USER_TOKENS);
	}

	private UserTokensTable(String alias, Table<UserTokensRecord> aliased) {
		this(alias, aliased, null);
	}

	private UserTokensTable(String alias, Table<UserTokensRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UserTokensRecord> getPrimaryKey() {
		return Keys.USER_TOKENS_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UserTokensRecord>> getKeys() {
		return Arrays.<UniqueKey<UserTokensRecord>>asList(Keys.USER_TOKENS_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<UserTokensRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<UserTokensRecord, ?>>asList(Keys.USER_TOKENS__USER_TOKENS_USER_UUID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserTokensTable as(String alias) {
		return new UserTokensTable(alias, this);
	}

	/**
	 * Rename this table
	 */
	public UserTokensTable rename(String name) {
		return new UserTokensTable(name, null);
	}
}
