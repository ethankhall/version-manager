/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables;


import io.ehdev.conrad.db.Keys;
import io.ehdev.conrad.db.Public;
import io.ehdev.conrad.db.tables.records.SsUserconnectionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SsUserconnectionTable extends TableImpl<SsUserconnectionRecord> {

    private static final long serialVersionUID = 79979338;

    /**
     * The reference instance of <code>public.ss_userconnection</code>
     */
    public static final SsUserconnectionTable SS_USERCONNECTION = new SsUserconnectionTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SsUserconnectionRecord> getRecordType() {
        return SsUserconnectionRecord.class;
    }

    /**
     * The column <code>public.ss_userconnection.userid</code>.
     */
    public final TableField<SsUserconnectionRecord, String> USERID = createField("userid", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.ss_userconnection.providerid</code>.
     */
    public final TableField<SsUserconnectionRecord, String> PROVIDERID = createField("providerid", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.ss_userconnection.provideruserid</code>.
     */
    public final TableField<SsUserconnectionRecord, String> PROVIDERUSERID = createField("provideruserid", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>public.ss_userconnection.rank</code>.
     */
    public final TableField<SsUserconnectionRecord, Integer> RANK = createField("rank", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ss_userconnection.displayname</code>.
     */
    public final TableField<SsUserconnectionRecord, String> DISPLAYNAME = createField("displayname", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>public.ss_userconnection.profileurl</code>.
     */
    public final TableField<SsUserconnectionRecord, String> PROFILEURL = createField("profileurl", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * The column <code>public.ss_userconnection.imageurl</code>.
     */
    public final TableField<SsUserconnectionRecord, String> IMAGEURL = createField("imageurl", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * The column <code>public.ss_userconnection.accesstoken</code>.
     */
    public final TableField<SsUserconnectionRecord, String> ACCESSTOKEN = createField("accesstoken", org.jooq.impl.SQLDataType.VARCHAR.length(512).nullable(false), this, "");

    /**
     * The column <code>public.ss_userconnection.secret</code>.
     */
    public final TableField<SsUserconnectionRecord, String> SECRET = createField("secret", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * The column <code>public.ss_userconnection.refreshtoken</code>.
     */
    public final TableField<SsUserconnectionRecord, String> REFRESHTOKEN = createField("refreshtoken", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * The column <code>public.ss_userconnection.expiretime</code>.
     */
    public final TableField<SsUserconnectionRecord, Long> EXPIRETIME = createField("expiretime", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.ss_userconnection</code> table reference
     */
    public SsUserconnectionTable() {
        this("ss_userconnection", null);
    }

    /**
     * Create an aliased <code>public.ss_userconnection</code> table reference
     */
    public SsUserconnectionTable(String alias) {
        this(alias, SS_USERCONNECTION);
    }

    private SsUserconnectionTable(String alias, Table<SsUserconnectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SsUserconnectionTable(String alias, Table<SsUserconnectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SsUserconnectionRecord> getPrimaryKey() {
        return Keys.SS_USERCONNECTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SsUserconnectionRecord>> getKeys() {
        return Arrays.<UniqueKey<SsUserconnectionRecord>>asList(Keys.SS_USERCONNECTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SsUserconnectionTable as(String alias) {
        return new SsUserconnectionTable(alias, this);
    }

    /**
     * Rename this table
     */
    public SsUserconnectionTable rename(String name) {
        return new SsUserconnectionTable(name, null);
    }
}
