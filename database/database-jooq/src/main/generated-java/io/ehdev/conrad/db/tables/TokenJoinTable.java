/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables;


import io.ehdev.conrad.db.Keys;
import io.ehdev.conrad.db.Public;
import io.ehdev.conrad.db.tables.records.TokenJoinRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenJoinTable extends TableImpl<TokenJoinRecord> {

    private static final long serialVersionUID = -1729237250;

    /**
     * The reference instance of <code>public.token_join</code>
     */
    public static final TokenJoinTable TOKEN_JOIN = new TokenJoinTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenJoinRecord> getRecordType() {
        return TokenJoinRecord.class;
    }

    /**
     * The column <code>public.token_join.uuid</code>.
     */
    public final TableField<TokenJoinRecord, UUID> UUID = createField("uuid", org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.token_join.token</code>.
     */
    public final TableField<TokenJoinRecord, UUID> TOKEN = createField("token", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.token_join.project_uuid</code>.
     */
    public final TableField<TokenJoinRecord, UUID> PROJECT_UUID = createField("project_uuid", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.token_join.repo_uuid</code>.
     */
    public final TableField<TokenJoinRecord, UUID> REPO_UUID = createField("repo_uuid", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.token_join.user_uuid</code>.
     */
    public final TableField<TokenJoinRecord, UUID> USER_UUID = createField("user_uuid", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * Create a <code>public.token_join</code> table reference
     */
    public TokenJoinTable() {
        this("token_join", null);
    }

    /**
     * Create an aliased <code>public.token_join</code> table reference
     */
    public TokenJoinTable(String alias) {
        this(alias, TOKEN_JOIN);
    }

    private TokenJoinTable(String alias, Table<TokenJoinRecord> aliased) {
        this(alias, aliased, null);
    }

    private TokenJoinTable(String alias, Table<TokenJoinRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TokenJoinRecord> getPrimaryKey() {
        return Keys.TOKEN_JOIN_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TokenJoinRecord>> getKeys() {
        return Arrays.<UniqueKey<TokenJoinRecord>>asList(Keys.TOKEN_JOIN_PKEY, Keys.TOKEN_JOIN_TOKEN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TokenJoinRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TokenJoinRecord, ?>>asList(Keys.TOKEN_JOIN__TOKEN_JOIN_TOKEN_FKEY, Keys.TOKEN_JOIN__TOKEN_JOIN_PROJECT_UUID_FKEY, Keys.TOKEN_JOIN__TOKEN_JOIN_REPO_UUID_FKEY, Keys.TOKEN_JOIN__TOKEN_JOIN_USER_UUID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TokenJoinTable as(String alias) {
        return new TokenJoinTable(alias, this);
    }

    /**
     * Rename this table
     */
    public TokenJoinTable rename(String name) {
        return new TokenJoinTable(name, null);
    }
}
