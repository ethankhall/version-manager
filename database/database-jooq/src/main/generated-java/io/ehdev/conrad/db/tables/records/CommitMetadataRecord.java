/**
 * This class is generated by jOOQ
 */
package io.ehdev.conrad.db.tables.records;


import io.ehdev.conrad.db.tables.CommitMetadataTable;

import java.time.Instant;
import java.util.UUID;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "commit_metadata", schema = "public", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"commit_uuid", "name"})
})
public class CommitMetadataRecord extends UpdatableRecordImpl<CommitMetadataRecord> implements Record10<UUID, UUID, UUID, UUID, String, String, Long, String, Instant, Instant> {

    private static final long serialVersionUID = -2142328915;

    /**
     * Setter for <code>public.commit_metadata.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.commit_metadata.uuid</code>.
     */
    @Id
    @Column(name = "uuid", unique = true, nullable = false)
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.commit_metadata.commit_uuid</code>.
     */
    public void setCommitUuid(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.commit_metadata.commit_uuid</code>.
     */
    @Column(name = "commit_uuid", nullable = false)
    @NotNull
    public UUID getCommitUuid() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.commit_metadata.project_uuid</code>.
     */
    public void setProjectUuid(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.commit_metadata.project_uuid</code>.
     */
    @Column(name = "project_uuid", nullable = false)
    @NotNull
    public UUID getProjectUuid() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.commit_metadata.repo_uuid</code>.
     */
    public void setRepoUuid(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.commit_metadata.repo_uuid</code>.
     */
    @Column(name = "repo_uuid", nullable = false)
    @NotNull
    public UUID getRepoUuid() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>public.commit_metadata.name</code>.
     */
    public void setName(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.commit_metadata.name</code>.
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.commit_metadata.uri</code>.
     */
    public void setUri(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.commit_metadata.uri</code>.
     */
    @Column(name = "uri", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getUri() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.commit_metadata.size</code>.
     */
    public void setSize(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.commit_metadata.size</code>.
     */
    @Column(name = "size", nullable = false, precision = 64)
    @NotNull
    public Long getSize() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>public.commit_metadata.content_type</code>.
     */
    public void setContentType(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.commit_metadata.content_type</code>.
     */
    @Column(name = "content_type", nullable = false, length = 128)
    @NotNull
    @Size(max = 128)
    public String getContentType() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.commit_metadata.created_at</code>.
     */
    public void setCreatedAt(Instant value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.commit_metadata.created_at</code>.
     */
    @Column(name = "created_at", nullable = false)
    public Instant getCreatedAt() {
        return (Instant) get(8);
    }

    /**
     * Setter for <code>public.commit_metadata.updated_at</code>.
     */
    public void setUpdatedAt(Instant value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.commit_metadata.updated_at</code>.
     */
    @Column(name = "updated_at")
    public Instant getUpdatedAt() {
        return (Instant) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<UUID, UUID, UUID, UUID, String, String, Long, String, Instant, Instant> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<UUID, UUID, UUID, UUID, String, String, Long, String, Instant, Instant> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field1() {
        return CommitMetadataTable.COMMIT_METADATA.UUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field2() {
        return CommitMetadataTable.COMMIT_METADATA.COMMIT_UUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field3() {
        return CommitMetadataTable.COMMIT_METADATA.PROJECT_UUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field4() {
        return CommitMetadataTable.COMMIT_METADATA.REPO_UUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return CommitMetadataTable.COMMIT_METADATA.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return CommitMetadataTable.COMMIT_METADATA.URI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field7() {
        return CommitMetadataTable.COMMIT_METADATA.SIZE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return CommitMetadataTable.COMMIT_METADATA.CONTENT_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Instant> field9() {
        return CommitMetadataTable.COMMIT_METADATA.CREATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Instant> field10() {
        return CommitMetadataTable.COMMIT_METADATA.UPDATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value1() {
        return getUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value2() {
        return getCommitUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value3() {
        return getProjectUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value4() {
        return getRepoUuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getUri();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value7() {
        return getSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getContentType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instant value9() {
        return getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instant value10() {
        return getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value2(UUID value) {
        setCommitUuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value3(UUID value) {
        setProjectUuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value4(UUID value) {
        setRepoUuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value5(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value6(String value) {
        setUri(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value7(Long value) {
        setSize(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value8(String value) {
        setContentType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value9(Instant value) {
        setCreatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord value10(Instant value) {
        setUpdatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommitMetadataRecord values(UUID value1, UUID value2, UUID value3, UUID value4, String value5, String value6, Long value7, String value8, Instant value9, Instant value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommitMetadataRecord
     */
    public CommitMetadataRecord() {
        super(CommitMetadataTable.COMMIT_METADATA);
    }

    /**
     * Create a detached, initialised CommitMetadataRecord
     */
    public CommitMetadataRecord(UUID uuid, UUID commitUuid, UUID projectUuid, UUID repoUuid, String name, String uri, Long size, String contentType, Instant createdAt, Instant updatedAt) {
        super(CommitMetadataTable.COMMIT_METADATA);

        set(0, uuid);
        set(1, commitUuid);
        set(2, projectUuid);
        set(3, repoUuid);
        set(4, name);
        set(5, uri);
        set(6, size);
        set(7, contentType);
        set(8, createdAt);
        set(9, updatedAt);
    }
}
